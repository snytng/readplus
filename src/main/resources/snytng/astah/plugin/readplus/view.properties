pluginExtraTabView.title=Read+
pluginExtraTabView.description=This plugin reads diagrams in the project.


View.optionLabel=Option
View.readTargetLabel=Target
View.readTaregetButton=Diagram,Project
View.operationLabel=Operation when read line selected:
View.comboData=Select & center,Select,Do nothing
View.zoomLabel=Zoom:


AstahProjectReader.numberOfDiagrams.message=This project has %d diagram(s).
AstahProjectReader.numberOfClasses.message=This project has %d class(es).
AstahProjectReader.projectNotFound=project not found
AstahProjectReader.projectOpenError=error to open the project

RelationReader.ox=\ ,\ ,
RelationReader.usage.meesage=%s[%s] uses [%s].
RelationReader.dependency.meesage=%s[%s] depends [%s].
RelationReader.generalization.meesage=%s[%s] is a type of [%s].
RelationReader.realization.meesage=%s[%s] realizes [%s].
RelationReader.association.meesage=%1$s[%2$s] %4$s [%3$s].
RelationReader.association.aggregate.verb=is a part of
RelationReader.containment.meesage=%s[%s] contains [%s].
RelationReader.dependency.allocate.meesage=%s[%s] allocates [%s].
RelationReader.dependency.verify.meesage=%s[%s] verifies [%s].
RelationReader.dependency.deriveReqt.meesage=%s[%s] is derived from [%s].
RelationReader.dependency.copy.meesage=%s[%s] is a copy of [%s].
RelationReader.dependency.satisfy.meesage=%s[%s] satisfies [%s].
RelationReader.dependency.refine.meesage=%s[%s] refines [%s].
RelationReader.dependency.trace.meesage=%s[%s] traces [%s].

SequenceDiagramReader.Lifeline.nameWithClass=[%1$s:%2$s]
SequenceDiagramReader.Lifeline.nameWithoutClass=[%1$s:]
SequenceDiagramReader.operation.ox=\ ,\ ,
SequenceDiagramReader.operation.message=%1$s %3$s %2$s
SequenceDiagramReader.diagram.message=[%s] diagram has %d lifeline(s) and %d message(s).
SequenceDiagramReader.selection.message=There is(are) %d selected element(s).

UsecaseDiagramReader.numberOfUsecasees.meessage=[%s] Usecase Diagram has %d usecase(s).
UsecaseDiagramReader.selection.meessage=There is(are) %d selected element(s).
UsecaseDiagramReader.association.meessage=%s %s
UsecaseDiagramReader.include.meessage=%1$s always %3$s, when %1$s %2$s.
UsecaseDiagramReader.extend.meessage=%1$s may %3$s, when %1$s %2$s.

ActivityDiagramReader.numberOfNodes.meessage=[%s] Activity Diagram has %d node(s).
ActivityDiagramReader.selection.meessage=There is(are) %d selected element(s).

StateMachineDiagramReader.numberOfStatesAndTransitions.meessage=[%s] StateMachine Diagram has %d state(s) and %d transition(s).
StateMachineDiagramReader.selection.meessage=There is(are) %d selected element(s).
StateMachineDiagramReader.state.message=State: %s
StateMachineDiagramReader.state.action.message=\ \ \ \ Action: %s
StateMachineDiagramReader.state.transition.message=\ \ \ \ Transition: %s
StateMachineDiagramReader.transition.message=Transition: %s

TransitionReader.fromInitialStateOfDiagram=When StateMachine Diagram starts
TransitionReader.fromInitialStateOfState=When [%s] State starts
TransitionReader.fromPseudoState=When StateMachine is in [%s] State
TransitionReader.fromStateWhileDoing=When StateMachine is in [%s] State and executing [%s] action
TransitionReader.fromState=When StateMachine is in [%s] State
TransitionReader.event=\ and [%s] event is sent
TransitionReader.nullEvent=\ and null event is sent
TransitionReader.transitionWithGuard=\ and [%s] condition(s) evaluate to TRUE, then
TransitionReader.transitionWithoutGuard=, then
TransitionReader.toStateWithactionOfTransition=\ StateMachine executes [%s] action and transits to [%s] State.
TransitionReader.toState=\ StateMachine transits to [%s] State.

